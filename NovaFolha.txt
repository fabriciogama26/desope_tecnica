import React, { useState, useEffect } from "react";
import { FolhaMedicao } from "@/Entities/FolhaMedicao"; 
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, FileText, ArrowRight } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import StepIndicator from "../Components/nova-folha/StepIndicator";
import DadosGerais from "../Components/nova-folha/DadosGerais";
import ServicosStep from "../Components/nova-folha/ServicosStep";
import EquipeSection from "../Components/folha/EquipeSection";
import EquipamentosSection from "../Components/folha/EquipamentosSection";
import MateriaisSection from "../Components/folha/MateriaisSection";
import Revisao from "../Components/nova-folha/Revisao";

export default function NovaFolha() {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    numero_fm: '',
    empreiteira: 'CENEGED',
    tecnico_light: '',
    endereco: '',
    tipo_processo: 'Expansão',
    caracteristica: 'Programada',
    data_obra: '',
    hora_acionada: '',
    hora_inicio: '',
    hora_fim: '',
    municipio: '',
    circuito: '',
    projeto: 'OII-',
    ordem_servico: '',
    ordem_manutencao: '',
    reserva: '',
    ntc: '',
    pi: '',
    ks: '',
    cf: '',
    zona: '',
    servicos: [],
    equipes: [],
    equipamentos_instalados: [],
    equipamentos_retirados: [],
    materiais_instalados: [],
    materiais_retirados: [],
    status: 'rascunho'
  });

  const steps = [
    { number: 1, title: "Dados Gerais", description: "Informações da obra" },
    { number: 2, title: "Equipes", description: "Equipes envolvidas" },
    { number: 3, title: "Serviços", description: "Serviços executados" },
    { number: 4, title: "Equipamentos", description: "Instalados/retirados" },
    { number: 5, title: "Materiais", description: "Utilizados/sobras" },
    { number: 6, title: "Revisão", description: "Conferir e salvar" }
  ];

  useEffect(() => {
    const gerarNumeroFM = async () => {
      try {
        const todasFolhas = await FolhaMedicao.list(null, 0); 
        const novoNumero = (todasFolhas?.length || 0) + 1;
        const numeroFM = `FM-${String(novoNumero).padStart(6, '0')}`;
        setFormData(prev => ({ ...prev, numero_fm: numeroFM }));
      } catch (error) {
        console.error("Erro ao gerar número FM:", error);
        const numeroFM = `FM${Date.now().toString().slice(-6)}`;
        setFormData(prev => ({ ...prev, numero_fm: numeroFM }));
      }
    };
    gerarNumeroFM();
  }, []);
  
  useEffect(() => {
    const prefix = formData.tipo_processo === 'Manutenção' ? 'OMI-' : 'OII-';
    if (!formData.projeto?.startsWith(prefix)) {
        const currentSuffix = formData.projeto?.replace(/^(OII-|OMI-)/, '') || '';
        setFormData(prev => ({ ...prev, projeto: `${prefix}${currentSuffix}` }));
    }
  }, [formData.tipo_processo]);

  const handleNext = () => {
  // Validação do campo "Projeto"
    if (
      ((formData.tipo_processo === "Expansão" || formData.tipo_processo === "Manutenção") &&
      formData.caracteristica === "Programada") &&
      (
        !formData.projeto?.trim() ||
        formData.projeto.replace(/\D/g, '').length !== 6 // 6 dígitos numéricos
      )
    ) {
      alert("O campo Projeto deve está no formato: XX-XXXX");
      return;
    }
    // Validação do campo "Ordem de Serviço"
    if (
      formData.tipo_processo === "Manutenção" &&
      formData.caracteristica === "Emergencial"
    ) {
      if (
        !formData.ordem_servico ||
        formData.ordem_servico.length !== 8 ||
        !formData.ordem_servico.startsWith("9")
      ) {
        alert("O campo Ordem de Serviço deve está no formato: 9XXXXXXX");
        return;
      }
    }
    // Avança para o próximo passo se passou nas validações
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const updateFormData = (newData) => {
    setFormData(prev => ({ ...prev, ...newData }));
  };

  const handleSave = async () => {
    try {
      await FolhaMedicao.create(formData);
      navigate(createPageUrl("Dashboard"));
    } catch (error) {
      console.error("Erro ao salvar folha:", error);
    }
  };

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1:
        return <DadosGerais data={formData} updateData={updateFormData} onNext={handleNext} />;
      case 2:
        return <EquipeSection equipes={formData.equipes} onChange={(equipes) => updateFormData({ equipes })} />;
      case 3:
        return <ServicosStep data={formData} updateData={updateFormData} onNext={handleNext} onPrevious={handlePrevious} />;
      case 4:
        return <EquipamentosSection equipamentosInstalados={formData.equipamentos_instalados} equipamentosRetirados={formData.equipamentos_retirados} onChangeInstalados={(equipamentos_instalados) => updateFormData({ equipamentos_instalados })} onChangeRetirados={(equipamentos_retirados) => updateFormData({ equipamentos_retirados })} />;
      case 5:
        return <MateriaisSection materiaisInstalados={formData.materiais_instalados} materiaisRetirados={formData.materiais_retirados} onChangeInstalados={(materiais_instalados) => updateFormData({ materiais_instalados })} onChangeRetirados={(materiais_retirados) => updateFormData({ materiais_retirados })} />;
      case 6:
        return <Revisao data={formData} onPrevious={handlePrevious} onSave={handleSave} />;
      default:
        return null;
    }
  };
  
  const renderNavigationButtons = () => {
    const nextStepTitle = steps[currentStep] ? steps[currentStep].title : '';

    if (currentStep === 2 || currentStep >= 4 && currentStep < 6) {
      return (
        <div className="flex justify-between mt-8">
          <Button variant="outline" onClick={handlePrevious}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Voltar
          </Button>
          <Button onClick={handleNext} className="bg-blue-600 hover:bg-blue-700">
            Próximo: {nextStepTitle}
            <ArrowRight className="w-4 h-4 ml-2" />
          </Button>
        </div>
      )
    }
    return null;
  }

  return (
    <div className="min-h-screen bg-slate-50 p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <div className="flex items-center gap-4 mb-8">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-slate-900 flex items-center gap-2">
              <FileText className="w-8 h-8 text-blue-600" />
              Nova Folha de Medição
            </h1>
            <p className="text-slate-600 mt-1">
              Siga as etapas para cadastrar uma nova folha de medição.
            </p>
          </div>
        </div>

        <StepIndicator steps={steps} currentStep={currentStep} />

        <Card className="bg-white border-0 shadow-lg mt-8">
           <CardHeader className="border-b border-slate-100">
            {/*<CardTitle className="text-xl text-slate-900">{steps[currentStep - 1].title}</CardTitle>*/}
            {/*<p className="text-slate-600 text-sm"> {steps[currentStep - 1].description}</p>*/}
          </CardHeader>
          <CardContent className="p-4 md:p-8">
            {renderCurrentStep()}
            {renderNavigationButtons()}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}